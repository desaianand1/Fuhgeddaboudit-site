{"mappings":"YAEO,SAASA,EAAuBC,GACnC,MAAMC,EACFC,SAASC,eAAe,uBAE5BF,EAAaG,UAAW,EAEpBH,EAAaI,QADI,SAAjBL,EAKJC,EAAaK,iBAAiB,SAAUC,EAC5C,CAEA,SAASA,EAAeC,GACpB,MAAMC,EAAiCD,EAAME,QAIjD,SACID,EACAE,GAEA,MAAMC,EAAoBD,EAAY,QAAU,OAChD,IACIE,aAAaC,QAAQ,QAASF,EAClC,CAAE,MAAOG,GACLN,EAAaL,UAAW,CAC5B,CACJ,CAbIY,CAAoBP,EAAcA,EAAaJ,SAC/CY,GACJ,CAgBO,SAASA,IACZ,MAAMC,EAA4BL,aAAaM,QAAQ,SAEvD,OAAmB,OAAfD,EACIE,OAAOC,WAAW,iCAClBnB,SAASoB,gBAAgBC,UAAUC,IAAI,QAChC,SAEPtB,SAASoB,gBAAgBC,UAAUE,OAAO,QACnC,SAGQ,SAAfP,GACAhB,SAASoB,gBAAgBC,UAAUC,IAAI,QACvCtB,SAASoB,gBAAgBI,MAAMC,YAAc,OACtC,SAEPzB,SAASoB,gBAAgBC,UAAUE,OAAO,QAC1CvB,SAASoB,gBAAgBI,MAAMC,YAAc,QACtC,QAGnB,CCzDA,SAASC,EAAgBjB,GACrB,MAAMkB,EAAoB3B,SAASC,eAAe,uBAC5C2B,EAAqB5B,SAASC,eAAe,wBAC/CQ,GACAmB,GAAoBP,UAAUQ,QAAQ,UAAW,aACjDF,GAAmBN,UAAUQ,QAAQ,YAAa,WAClDD,GAAoBP,UAAUQ,QAAQ,WAAY,YAClDF,GAAmBN,UAAUQ,QAAQ,WAAY,cAEjDD,GAAoBP,UAAUQ,QAAQ,YAAa,WACnDF,GAAmBN,UAAUQ,QAAQ,UAAW,aAChDD,GAAoBP,UAAUQ,QAAQ,WAAY,YAClDF,GAAmBN,UAAUQ,QAAQ,WAAY,YAEzD,CAEA,SAASC,EAAarB,GAClB,MAAMsB,EAAgB/B,SAASC,eAAe,mBACxC+B,EAAiBhC,SAASC,eAAe,kBAC3CQ,GACAsB,GAAeV,UAAUQ,QAAQ,UAAW,aAC5CG,GAAgBX,UAAUQ,QAAQ,YAAa,WAC/CE,GAAeV,UAAUQ,QAAQ,WAAY,YAC7CG,GAAgBX,UAAUQ,QAAQ,WAAY,cAE9CE,GAAeV,UAAUQ,QAAQ,YAAa,WAC9CG,GAAgBX,UAAUQ,QAAQ,UAAW,aAC7CE,GAAeV,UAAUQ,QAAQ,WAAY,YAC7CG,GAAgBX,UAAUQ,QAAQ,WAAY,YAEtD,CC5BO,SAASI,IACZ,MAAM1B,EACFP,SAASC,eAAe,iBAE5BM,EAAaH,iBAAiB,SAAU8B,GACxCR,EAAgBnB,EAAaJ,SAC7B2B,EAAavB,EAAaJ,QAC9B,CAEA,SAAS+B,EAAU5B,GAMf6B,YALA,WACI,MAAM5B,EAAiCD,EAAME,OAC7CkB,EAAgBnB,EAAaJ,SAC7B2B,EAAavB,EAAaJ,QAC9B,GACwB,IAC5B,CCTAH,SAASI,iBAAiB,oBAN1B,WAEIP,EADqBkB,KAErBkB,GACJ,G","sources":["src/ts/theme-toggle.ts","src/ts/hero.ts","src/ts/hero-toggle.ts","src/ts/index.ts"],"sourcesContent":["type Theme = \"light\" | \"dark\";\n\nexport function initializeThemeToggler(initialTheme: Theme) {\n    const themeToggler = <HTMLInputElement>(\n        document.getElementById(\"theme-toggle-switch\")\n    );\n    themeToggler.disabled = false;\n    if (initialTheme === \"dark\") {\n        themeToggler.checked = false;\n    } else {\n        themeToggler.checked = true;\n    }\n    themeToggler.addEventListener(\"change\", onThemeToggled);\n}\n\nfunction onThemeToggled(event: Event) {\n    const toggleSwitch = <HTMLInputElement>event.target;\n    saveThemePreference(toggleSwitch, toggleSwitch.checked);\n    setSavedTheme();\n}\nfunction saveThemePreference(\n    toggleSwitch: HTMLInputElement,\n    isToggled: boolean\n) {\n    const themeValue: Theme = isToggled ? \"light\" : \"dark\";\n    try {\n        localStorage.setItem(\"theme\", themeValue);\n    } catch (error) {\n        toggleSwitch.disabled = true;\n    }\n}\n/**\n *  sets html theme based on saved theme value. If no theme was previously saved to localstorage, defaults to system-preferred theme\n * @returns Theme: \"light\" | \"dark\"\n */\nexport function setSavedTheme(): Theme {\n    const savedTheme: string | null = localStorage.getItem(\"theme\");\n\n    if (savedTheme === null) {\n        if (window.matchMedia(\"(prefers-color-scheme: dark)\")) {\n            document.documentElement.classList.add(\"dark\");\n            return \"dark\";\n        } else {\n            document.documentElement.classList.remove(\"dark\");\n            return \"light\";\n        }\n    } else {\n        if (savedTheme === \"dark\") {\n            document.documentElement.classList.add(\"dark\");\n            document.documentElement.style.colorScheme = \"dark\";\n            return \"dark\";\n        } else {\n            document.documentElement.classList.remove(\"dark\");\n            document.documentElement.style.colorScheme = \"light\";\n            return \"light\";\n        }\n    }\n}\n","function setHeroHeadline(isToggled: boolean) {\n    const toggledOnHeadline = document.getElementById(\"headline-toggled-on\");\n    const toggledOffHeadline = document.getElementById(\"headline-toggled-off\");\n    if (isToggled) {\n        toggledOffHeadline?.classList.replace(\"visible\", \"invisible\");\n        toggledOnHeadline?.classList.replace(\"invisible\", \"visible\");\n        toggledOffHeadline?.classList.replace(\"relative\", \"absolute\");\n        toggledOnHeadline?.classList.replace(\"absolute\", \"relative\");\n    } else {\n        toggledOffHeadline?.classList.replace(\"invisible\", \"visible\");\n        toggledOnHeadline?.classList.replace(\"visible\", \"invisible\");\n        toggledOffHeadline?.classList.replace(\"absolute\", \"relative\");\n        toggledOnHeadline?.classList.replace(\"relative\", \"absolute\");\n    }\n}\n\nfunction setHeroImage(isToggled: boolean) {\n    const heroImgBefore = document.getElementById(\"hero-img-before\");\n    const heroImageAfter = document.getElementById(\"hero-img-after\");\n    if (isToggled) {\n        heroImgBefore?.classList.replace(\"visible\", \"invisible\");\n        heroImageAfter?.classList.replace(\"invisible\", \"visible\");\n        heroImgBefore?.classList.replace(\"relative\", \"absolute\");\n        heroImageAfter?.classList.replace(\"absolute\", \"relative\");\n    } else {\n        heroImgBefore?.classList.replace(\"invisible\", \"visible\");\n        heroImageAfter?.classList.replace(\"visible\", \"invisible\");\n        heroImgBefore?.classList.replace(\"absolute\", \"relative\");\n        heroImageAfter?.classList.replace(\"relative\", \"absolute\");\n    }\n}\n\nexport { setHeroHeadline, setHeroImage };\n","import { setHeroHeadline, setHeroImage } from \"./hero\";\n\nexport function initializeHeroToggler() {\n    const toggleSwitch = <HTMLInputElement>(\n        document.getElementById(\"toggle-switch\")\n    );\n    toggleSwitch.addEventListener(\"change\", onToggled);\n    setHeroHeadline(toggleSwitch.checked);\n    setHeroImage(toggleSwitch.checked);\n}\n\nfunction onToggled(event: Event) {\n    function toggleState() {\n        const toggleSwitch = <HTMLInputElement>event.target;\n        setHeroHeadline(toggleSwitch.checked);\n        setHeroImage(toggleSwitch.checked);\n    }\n    setTimeout(toggleState, 250);\n}\n","import { initializeThemeToggler, setSavedTheme } from \"./theme-toggle\";\nimport { initializeHeroToggler } from \"./hero-toggle\";\n\nfunction onDOMLoaded(): void {\n    const initialTheme = setSavedTheme();\n    initializeThemeToggler(initialTheme);\n    initializeHeroToggler();\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", onDOMLoaded);\n"],"names":["$64adb7b004639335$export$7ca82b13350b7726","initialTheme","themeToggler","document","getElementById","disabled","checked","addEventListener","$64adb7b004639335$var$onThemeToggled","event","toggleSwitch","target","isToggled","themeValue","localStorage","setItem","error","$64adb7b004639335$var$saveThemePreference","$64adb7b004639335$export$213280d66861716c","savedTheme","getItem","window","matchMedia","documentElement","classList","add","remove","style","colorScheme","$214f6de818ddf7c3$export$598d47f3e159a8c2","toggledOnHeadline","toggledOffHeadline","replace","$214f6de818ddf7c3$export$e7b0effc977ff246","heroImgBefore","heroImageAfter","$beba5a58b55f77cf$export$84485be8522896ce","$beba5a58b55f77cf$var$onToggled","setTimeout"],"version":3,"file":"index.344f4852.js.map"}