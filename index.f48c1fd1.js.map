{"mappings":"kpBAsBA,IAAAA,EACAC,E,iJArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,gK,SCAzDC,EAAiBF,KAAKC,MAAM,6cCe5B,MAAME,EACFC,SAASC,cAAc,0BAG3B,SAASC,EAAYC,GACjB,MAAMC,EAAeL,EAAkBE,cACnC,sBAEJ,GAAqB,OAAjBG,EAAuB,CACvBC,QAAQC,IAAIP,EAAkBQ,YAC9B,MAAMC,EAQNR,SAASC,cAAc,qBAEHQ,QAAQC,WAAU,GATtCX,EAAkBY,YAAYH,EAClC,EAWJ,SAA4BL,EAAoBC,GAC5C,MAAMQ,EAASb,EAAkBE,cAC7B,wBAEEY,EAASd,EAAkBE,cAC7B,qBAEJ,GAAIE,EAAW,EAqCnB,SACIW,EACAV,EACAS,EACAD,GAEAR,EAAaW,UAAUC,OAAO,qBAC9B,MAAMC,EAAiBjB,SAASkB,cAAc,QAC9CD,EAAeF,UAAUI,IAAI,mBAC7BF,EAAeG,YAAcN,EAAOO,YACpCjB,EAAagB,YAAc,GAC3BhB,EAAaO,YAAYM,GACzBb,EAAakB,OAAOR,EAAOS,MAAQ,IACnCX,EAAOY,OAASV,EAAOW,KACvBZ,EAAOa,IAAMZ,EAAOa,IACpBd,EAAOe,IAAMd,EAAOc,IAAIC,KAC5B,CAnDQC,CADyCC,EAAAjC,GAAgB,cAGrDM,EACAS,EACAD,EAER,KAAO,EAYX,SACIE,EACAV,EACAS,EACAD,GAEAR,EAAaW,UAAUI,IAAI,qBAC3B,MAAMF,EAAiBb,EAAaH,cAAc,wBAC3B,OAAnBgB,GACAb,EAAa4B,YAAYf,GAE7Bb,EAAagB,YAAcN,EAAOS,KAClCX,EAAOY,OAASV,EAAOW,KACvBZ,EAAOa,IAAMZ,EAAOa,IACpBd,EAAOe,IAAMd,EAAOc,IAAIC,KAC5B,CAxBQI,CADIF,EAAAjC,GAAgB,eAGhBM,EACAS,EACAD,EAER,CACJ,CAnCIsB,CAAmB/B,EAAWC,EAClC,C,SC7BA+B,EAAiB,IAAAC,IAAoB1C,EAAA,SAAA2C,QAA6C,qBAAAC,KAAUC,W,SC0B5F,SAASC,EAAgBrC,GACrB,OAAmB4B,EAAZ5B,EAAYsC,EAAoBN,EAC3C,CC5BAM,EAAiB,IAAAL,IAAoB1C,EAAA,SAAA2C,QAA6C,qBAAAC,KAAUC,WD6B5FvC,SAAS0C,iBAAiB,oBAzB1B,WACI,MAAMC,EACF3C,SAAS4C,eAAe,iBAEtBC,EAA8B7C,SAAS4C,eAAe,eAC5DD,EAAaD,iBAAiB,SAWlC,SAA0BG,GACtB,OAAO,SAAyBC,IAPpC,SAAmBA,EAAcD,GAC7B,MAAMF,EAAiCG,EAAMC,OAC7C7C,EAAYyC,EAAaK,SACzBH,EAAUnB,IAAMc,EAAgBG,EAAaK,QACjD,CAIQC,CAAUH,EAAOD,EACrB,CACJ,CAf4CK,CAAiBL,IACzD3C,EAAYyC,EAAaK,SACzBH,EAAUnB,IAAMc,EAAgBG,EAAaK,QACjD","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-828fabed2e7d3fcc.js","src/ts/headline-phrases.json","src/ts/headline.ts","node_modules/@parcel/runtime-js/lib/runtime-763fb3afc2be1763.js","src/ts/index.ts","node_modules/@parcel/runtime-js/lib/runtime-b98493efd8fe8c23.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"cwOqD\\\":\\\"index.f48c1fd1.js\\\",\\\"cmbON\\\":\\\"example-before.93c53d66.png\\\",\\\"kAyCh\\\":\\\"example-after.8198848e.png\\\"}\"));","{\r\n    \"toggled-on\":{\r\n        \"highlighted\": \"Free\",\r\n        \"text\": \" from AI jargon.\",\r\n        \"webp\": \"https://fonts.gstatic.com/s/e/notoemoji/latest/1f604/512.webp\",\r\n        \"gif\": \"https://fonts.gstatic.com/s/e/notoemoji/latest/1f604/512.gif\",\r\n        \"alt\": {\r\n            \"emoji\": \"ðŸ˜„\"\r\n        }\r\n    },\r\n    \"toggled-off\":{\r\n        \"text\": \"AI buzzwords everywhere.\",\r\n        \"webp\": \"https://fonts.gstatic.com/s/e/notoemoji/latest/1f635_200d_1f4ab/512.webp\",\r\n        \"gif\": \"https://fonts.gstatic.com/s/e/notoemoji/latest/1f635_200d_1f4ab/512.gif\",\r\n        \"alt\": {\r\n            \"emoji\": \"ðŸ˜µ\"\r\n        }\r\n    }\r\n}","import headlinePhrases from \"./headline-phrases.json\";\n\ninterface ToggledOffPhrase {\n    text: string | null;\n    webp: string;\n    gif: string;\n    alt: {\n        emoji: string;\n    };\n}\n\ninterface ToggledOnPhrase extends ToggledOffPhrase {\n    highlighted: string;\n}\n\nconst headlineContainer: HTMLDivElement = <HTMLDivElement>(\n    document.querySelector(\"div#headline-container\")\n);\n\nfunction setHeadline(isToggled: boolean) {\n    const headlineSpan = headlineContainer.querySelector(\n        \"span#headline-text\"\n    ) as HTMLSpanElement;\n    if (headlineSpan === null) {\n        console.log(headlineContainer.childNodes);\n        const headline = instantiateHeadlineTemplate();\n        headlineContainer.appendChild(headline);\n    }\n    setHeadlineContent(isToggled, headlineSpan);\n}\n\nfunction instantiateHeadlineTemplate(): HTMLElement {\n    const headlineTemplate: HTMLTemplateElement = <HTMLTemplateElement>(\n        document.querySelector(\"template#headline\")\n    );\n    return headlineTemplate.content.cloneNode(true) as HTMLElement;\n}\n\nfunction setHeadlineContent(isToggled: boolean, headlineSpan: HTMLSpanElement) {\n    const picSrc = headlineContainer.querySelector(\n        \"picture.emoji>source\"\n    ) as HTMLSourceElement;\n    const picImg = headlineContainer.querySelector(\n        \"picture.emoji>img\"\n    ) as HTMLImageElement;\n    if (isToggled) {\n        const toggledOnPhrase: ToggledOnPhrase = headlinePhrases[\"toggled-on\"];\n        setToggledOnHeadlineContent(\n            toggledOnPhrase,\n            headlineSpan,\n            picImg,\n            picSrc\n        );\n    } else {\n        const toggledOffPhrase: ToggledOffPhrase =\n            headlinePhrases[\"toggled-off\"];\n        setToggledOffHeadlineContent(\n            toggledOffPhrase,\n            headlineSpan,\n            picImg,\n            picSrc\n        );\n    }\n}\n\nfunction setToggledOffHeadlineContent(\n    phrase: ToggledOffPhrase,\n    headlineSpan: Element,\n    picImg: HTMLImageElement,\n    picSrc: HTMLSourceElement\n) {\n    headlineSpan.classList.add(\"deemphasized-text\");\n    const emphasizedSpan = headlineSpan.querySelector(\"span.emphasized-text\");\n    if (emphasizedSpan !== null) {\n        headlineSpan.removeChild(emphasizedSpan);\n    }\n    headlineSpan.textContent = phrase.text;\n    picSrc.srcset = phrase.webp;\n    picImg.src = phrase.gif;\n    picImg.alt = phrase.alt.emoji;\n}\n\nfunction setToggledOnHeadlineContent(\n    phrase: ToggledOnPhrase,\n    headlineSpan: Element,\n    picImg: HTMLImageElement,\n    picSrc: HTMLSourceElement\n) {\n    headlineSpan.classList.remove(\"deemphasized-text\");\n    const emphasizedSpan = document.createElement(\"span\");\n    emphasizedSpan.classList.add(\"emphasized-text\");\n    emphasizedSpan.textContent = phrase.highlighted;\n    headlineSpan.textContent = \"\";\n    headlineSpan.appendChild(emphasizedSpan);\n    headlineSpan.append(phrase.text ?? \"\");\n    picSrc.srcset = phrase.webp;\n    picImg.src = phrase.gif;\n    picImg.alt = phrase.alt.emoji;\n}\n\nexport { setHeadline };\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"cmbON\")).toString();","import { setHeadline } from \"./headline\";\nimport exampleBeforeImage from \"../assets/hero/example-before.png\";\nimport exampleAfterImage from \"../assets/hero/example-after.png\";\n\nfunction onDOMLoaded(): void {\n    const toggleSwitch = <HTMLInputElement>(\n        document.getElementById(\"toggle-switch\")\n    );\n    const heroImage = <HTMLImageElement>document.getElementById(\"example-img\");\n    toggleSwitch.addEventListener(\"change\", onToggledCurried(heroImage));\n    setHeadline(toggleSwitch.checked);\n    heroImage.src = getHeroImageSrc(toggleSwitch.checked);\n}\n\nfunction onToggled(event: Event, heroImage: HTMLImageElement) {\n    const toggleSwitch = <HTMLInputElement>event.target;\n    setHeadline(toggleSwitch.checked);\n    heroImage.src = getHeroImageSrc(toggleSwitch.checked);\n}\n\nfunction onToggledCurried(heroImage: HTMLImageElement) {\n    return function onToggleWrapper(event: Event) {\n        onToggled(event, heroImage);\n    };\n}\n\nfunction getHeroImageSrc(isToggled: boolean): string {\n    return isToggled ? exampleAfterImage : exampleBeforeImage;\n}\ndocument.addEventListener(\"DOMContentLoaded\", onDOMLoaded);\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kAyCh\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$9ca10e05e8c48b66$exports","$7bce53911f8d7234$var$headlineContainer","document","querySelector","$7bce53911f8d7234$export$cf003ed526f9486f","isToggled","headlineSpan","console","log","childNodes","headline","content","cloneNode","appendChild","picSrc","picImg","phrase","classList","remove","emphasizedSpan","createElement","add","textContent","highlighted","append","text","srcset","webp","src","gif","alt","emoji","$7bce53911f8d7234$var$setToggledOnHeadlineContent","$parcel$interopDefault","removeChild","$7bce53911f8d7234$var$setToggledOffHeadlineContent","$7bce53911f8d7234$var$setHeadlineContent","$da7b46acf27c35b7$exports","URL","resolve","url","toString","$3effd2406f738425$var$getHeroImageSrc","$0cd94d7e2827fd58$exports","addEventListener","toggleSwitch","getElementById","heroImage","event","target","checked","$3effd2406f738425$var$onToggled","$3effd2406f738425$var$onToggledCurried"],"version":3,"file":"index.f48c1fd1.js.map"}